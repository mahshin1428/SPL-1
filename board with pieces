
#include <conio.h>
#include <graphics.h>
#include <stdio.h>



int setpiece(char piece,int x1, int y1, int x2, int y2){

    if(piece=='K'){

    readimagefile("w_king.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='Q'){

    readimagefile("w_queen.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='P'){

    readimagefile("w_pawn.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='R'){

    readimagefile("w_rook.gif",x1+20,y1+20,x2-20,y2-20);
    }


    if(piece=='N'){

    readimagefile("w_knight.gif",x1+20,y1+20,x2-20,y2-20);
    }


    if(piece=='B'){

    readimagefile("w_bishop.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='k'){

    readimagefile("b_king.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='q'){

    readimagefile("b_queen.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='r'){

    readimagefile("b_rook.gif",x1+20,y1+20,x2-20,y2-20);
    }

     if(piece=='n'){

    readimagefile("b_knight.gif",x1+20,y1+20,x2-20,y2-20);
    }

     if(piece=='p'){

    readimagefile("b_pawn.gif",x1+20,y1+20,x2-20,y2-20);
    }

     if(piece=='b'){

    readimagefile("b_bishop.gif",x1+20,y1+20,x2-20,y2-20);
    }

}

// Driver Code
int main()
{

    char board[6][5] = {
                        {'Q', 'K', 'B','N','R'},
                        {'P', 'P', 'P','P','P'},
                        {' ', ' ', ' ',' ',' '},
                        {' ', ' ', ' ',' ',' '},
                        {'p', 'p', 'p','p','p'},
                        {'r', 'n', 'b','k','q'}
                    };

	// Auto detection
	int gr = DETECT, gm;
	int r, c, x = 100, y = 100, black = 0;
	int size = 100;
    initwindow(800,800,"MENU",0,0,false,true);

	// Iterate over 6rows
	for (r = 0; r < 6; r++) {

		// iterate over 5cols
		for (c = 0; c < 5; c++) {

			// If current block is to
			// color as black
			if (black == 0) {

				// set next color as white
				setcolor(WHITE);

				// sets the current fill
				// for black boxes
				setfillstyle(SOLID_FILL, DARKGRAY);

				// creating rectangle
				// with length and breadth
				rectangle(x, y, x + size, y + size);

				// Fill an enclosed area
				floodfill(x + 1, y + 1, WHITE);

				// Set black to true
				black = 1;
			}

			// If current block is to
			// color as white
			else {
				setcolor(WHITE);

				// sets the current fill
				// pattern and fill color
				// for whitw boxes
				setfillstyle(SOLID_FILL, WHITE);

				// creating rectangle
				// with length and breadth
				rectangle(x, y, x + size, y + size);

				// Fill an enclosed area
				floodfill(x + 1, y + 1, WHITE);

				// Set black to false
				black = 0;
			}
                setpiece(board[r][c],x,y,x+size,y+size);


			x = x + size;

			// delay function under library
			// "dos.h" for holding the
			// function for some time
			delay(30);

		}

		delay(30);
		x = size;
		y = size + y;
	}

	getch();
	closegraph();
	return 0;
}
