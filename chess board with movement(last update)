
#include <conio.h>
#include <graphics.h>
#include <stdio.h>
#include<process.h>
//#include<iostream>

using namespace std;




 char board[6][5] = {
                        {'Q', 'K', 'B','N','R'},
                        {'P', 'P', 'P','P','P'},
                        {' ', ' ', ' ',' ',' '},
                        {' ', ' ', ' ',' ',' '},
                        {'p', 'p', 'p','p','p'},
                        {'r', 'n', 'b','k','q'}
                    };





int setpiece(char piece,int x1, int y1, int x2, int y2){

    if(piece=='K'){

    readimagefile("w_king.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='Q'){

    readimagefile("w_queen.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='P'){

    readimagefile("w_pawn.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='R'){

    readimagefile("w_rook.gif",x1+20,y1+20,x2-20,y2-20);
    }


    if(piece=='N'){

    readimagefile("w_knight.gif",x1+20,y1+20,x2-20,y2-20);
    }


    if(piece=='B'){

    readimagefile("w_bishop.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='k'){

    readimagefile("b_king.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='q'){

    readimagefile("b_queen.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='r'){

    readimagefile("b_rook.gif",x1+20,y1+20,x2-20,y2-20);
    }

     if(piece=='n'){

    readimagefile("b_knight.gif",x1+20,y1+20,x2-20,y2-20);
    }

     if(piece=='p'){

    readimagefile("b_pawn.gif",x1+20,y1+20,x2-20,y2-20);
    }

     if(piece=='b'){
        //outtextxy(x1+25,y1+50,"Bishop");

    readimagefile("b_bishop.gif",x1+20,y1+20,x2-20,y2-20);
    }

}


int DrawChessboard(){
    cleardevice();
    	int r, c, x = 100, y = 100;

    int  black = 0;
    int size = 100;

for ( r = 0; r < 6; r++) {

		// iterate over 5cols
		for ( c = 0; c < 5; c++) {

			// If current block is to
			// color as black
			if (black == 0) {

				// set next color as white
				setcolor(WHITE);

				// sets the current fill
				// for black boxes
				setfillstyle(SOLID_FILL, DARKGRAY);

				// creating rectangle
				// with length and breadth
				rectangle(x, y, x + size, y + size);

				// Fill an enclosed area
				floodfill(x + 1, y + 1, WHITE);

				// Set black to true
				black = 1;
			}

			// If current block is to
			// color as white
			else {
				setcolor(WHITE);

				// sets the current fill
				// pattern and fill color
				// for whitw boxes
				setfillstyle(SOLID_FILL, WHITE);

				// creating rectangle
				// with length and breadth
				rectangle(x, y, x + size, y + size);

				// Fill an enclosed area
				floodfill(x + 1, y + 1, WHITE);

				// Set black to false
				black = 0;
			}
                setpiece(board[r][c],x,y,x+size,y+size);
                printf("%d%d %c\n",r,c,board[r][c]);


			x = x + size;

			// delay function under library
			// "dos.h" for holding the
			// function for some time
			delay(30);

		}

		delay(30);
		x = size;
		y = size + y;
	}


}




int selectedx = 0, selectedy = 0;

void selectandmove(){
    delay(1);
    setcolor(RED);
    for (int i = 0; i < 5; ++i) {

        rectangle(selectedx*100 - i, selectedy*100 - i, selectedx*100+100 + i, selectedy*100+100 + i);
    }
    delay(1);
}


int pawnMove(){



}


void movesto(int x, int y){
    delay(1);
    printf("from: %d,%d %c\n",selectedy-1,selectedx-1, board[selectedy-1][selectedx-1]);
    printf("to: %d,%d %c\n",y-1,x-1,board[y-1][x-1]);
    if(board[y-1][x-1]!=' ')
        return;

    else{
        if(board[selectedy-1][selectedx-1]=='P')
            if(selectedx==x && selectedy+1==y){
                board[y-1][x-1] = board[selectedy-1][selectedx-1];
                board[selectedy-1][selectedx-1] = ' ';
            }
        if(board[selectedy-1][selectedx-1]=='p')
            if(selectedx==x && selectedy-1==y){
                board[y-1][x-1] = board[selectedy-1][selectedx-1];
                board[selectedy-1][selectedx-1] = ' ';
            }

    /*
    if(board[k][l]==empty and k==i-1 and l==j)
            DrawChessboard();
        else if(board[k][l]==empty and k==i-2 and l==j and i==6)
            DrawChessboard();
        else if(board[k][l]==black and k==i-1 and (l==j+1 or l==j-1))
            DrawChessboard();
    */

        DrawChessboard();
    }
    delay(1);
}






int moving = 0;


int selectSquare(int x, int y){


int x1 = x*100, y1 = y*100, x2 = x*100+100, y2 = y*100+100;


  while(1){
    //cleardevice();
        if(moving==1)
            {
            selectandmove();
            delay(1);
        }

    setcolor(LIGHTGREEN);
	//rectangle(100,100,200,200);
   for (int i = 0; i < 5; ++i)
    {

        rectangle(x*100 - i, y*100 - i, x*100+100 + i, y*100+100 + i);

    }


    if(GetAsyncKeyState(VK_RIGHT))
        {
        //x1 += 100;
        //x2 += 100;
        x += 1;
        cleardevice();
        DrawChessboard();
        if(moving==1)
        {
            selectandmove();
            delay(1);
        }
    }

     if(GetAsyncKeyState(VK_LEFT))
        {
        //x1 -= 100;
        //x2 -= 100;
        x-=1;
        cleardevice();
        DrawChessboard();
        if(moving==1)
        {
            selectandmove();
            delay(1);
        }
    }



     if(GetAsyncKeyState(VK_UP))
        {
        //y1 -= 100;
        //y2 -= 100;
        y-=1;
        cleardevice();
                DrawChessboard();
        if(moving==1)
            {
            selectandmove();
            delay(1);
        }
    }

     if(GetAsyncKeyState(VK_DOWN))
        {
        //y1 += 100;
        //y2 += 100;
        y+=1;
        cleardevice();
                DrawChessboard();
        if(moving==1)
            {
            selectandmove();
            delay(1);
        }
    }

     if(GetAsyncKeyState(VK_RETURN)){
        if(moving==0)
            {
            selectedx = x;
            selectedy = y;
            selectandmove();
            moving = 1;
        }

        else
        {
            movesto(x,y);
            moving=0;
            selectedx = 0;
            selectedy = 0;
            DrawChessboard();
            if(moving==1)
                {
                selectandmove();
                delay(1);
            }
        }

        x++; y++;
        delay(30);
    }

    //DrawChessboard();
    delay(30);
 }
return 0;

}






int main()
{


	int gr = DETECT, gm;

    initwindow(800,800,"MENU",0,0,false,true);

    DrawChessboard();

    selectSquare(1,1);


	getch();
	closegraph();
	return 0;
}
