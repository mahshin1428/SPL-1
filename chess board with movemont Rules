
#include <graphics.h>
#include <stdio.h>
#include<process.h>
//#include<iostream>
#include<math.h>

char board[6][5] =
{
    {'Q','K', 'B','N','R'},
    {'P', 'P', 'P','P','P'},
    {' ', ' ', ' ',' ',' '},
    {' ', ' ', ' ',' ',' '},
    {'p', 'p', 'p','p','p'},
    {'r', 'n', 'b','k','q'}
};

int row,col;
int pawnvalue=1;
int rookvalue=4;
int knightvalue=5;
int bishopvalue=3;
int queenvalue=7;
int kingvalue=9;

int whooseMove = 0;
int selectedx= 0;
int selectedy = 0;


// whooseMove = 0, white's move
// whooseMove = 1, black's move

int colour=0;
//colour=0 white
//colour=1 black

int piecevalue(int colour)
{
    int value=0;
    for(int row=0; row<6; ++row)
    {
        for(int col=0; col<5; ++col)
        {
            if(colour==0)  // meaning the white pieces
            {
                if(board[row][col]=='P')
                {
                    value+=pawnvalue;
                }
                if(board[row][col]=='Q')
                {
                    value+=queenvalue;
                }
                if(board[row][col]=='R')
                {
                    value+=rookvalue;
                }
                if(board[row][col]=='B')
                {
                    value+=bishopvalue;
                }
                if(board[row][col]=='N')
                {
                    value+=knightvalue;
                }


            }
            if(colour==1)  // meaning the white pieces
            {
                if(board[row][col]=='p')
                {
                    value+=pawnvalue;
                }
                if(board[row][col]=='q')
                {
                    value+=queenvalue;
                }
                if(board[row][col]=='r')
                {
                    value+=rookvalue;
                }
                if(board[row][col]=='b')
                {
                    value+=bishopvalue;
                }
                if(board[row][col]=='n')
                {
                    value+=knightvalue;
                }

            }

        }
    }
    colour=!colour;
    return value;
}

bool isValid(int x,int y)
{


}


// Function to check if the path between two positions is blocked by any piece
int isPathBlocked(int startX, int startY, int endX, int endY)
{
    int i, j;
    int stepX = (endX - startX > 0) ? 1 : (endX - startX < 0) ? -1 : 0;
    int stepY = (endY - startY > 0) ? 1 : (endY - startY < 0) ? -1 : 0;

    for (i = startX + stepX, j = startY + stepY; i != endX || j != endY; i += stepX, j += stepY)
    {
        if (board[i][j] != ' ')
        {
            // Path is blocked by a piece
            return 1;
        }
    }

    // Path is not blocked
    return 0;
}

// Function to check if the black king is in check
int isBlackKingInCheck()
{

    int blackKingRow, blackKingCol;

    // Find the position of the black king
    for (row = 0; row < 6; row++)
    {
        for (col = 0; col < 5; col++)
        {
            if (board[row][col] == 'k')
            {
                blackKingRow = row;
                blackKingCol = col;
                break;
            }
        }
    }

    // Check if any white piece can attack the black king
    for (row = 0; row < 6; row++)
    {
        for (col = 0; col < 5; col++)
        {
            char piece = board[row][col];
            switch (piece)
            {
            case 'Q': // Queen
                // Check for horizontal, vertical, or diagonal attack with no obstacles in the way
                if ((row == blackKingRow || col == blackKingCol || abs(row - blackKingRow) == abs(col - blackKingCol)) &&
                        !isPathBlocked(row, col, blackKingRow, blackKingCol))
                    return 1;
                break;
            case 'R': // Rook
                // Check for horizontal or vertical attack with no obstacles in the way
                if ((row == blackKingRow || col == blackKingCol) && !isPathBlocked(row, col, blackKingRow, blackKingCol))
                    return 1;
                break;
            case 'B': // Bishop
                // Check for diagonal attack with no obstacles in the way
                if ((abs(row - blackKingRow) == abs(col- blackKingCol)) && !isPathBlocked(row, col, blackKingRow, blackKingCol))
                    return 1;
                break;
            case 'N':
                // Check for L-shaped attack
                if ((row - blackKingRow == 2 && col - blackKingCol == 1) ||(row - blackKingRow == 1 && col - blackKingCol == 2) ||(blackKingRow - row == 2 && blackKingCol - col == 1) ||
                        (blackKingRow - row == 1 && blackKingCol - col == 2))
                    return 1;
                break;
            case 'P':
                if ((row - blackKingRow == 1) && (col - blackKingCol == 1 || col - blackKingCol == -1))    // only attack diagonally

                    return 1;
                break;
            }
        }
    }

    // No piece found that can attack the black king
    return 0;
}

// Function to check if the white king is in check
int isWhiteKingInCheck()
{

    int whiteKingRow, whiteKingCol;

    // Find the position of the white king
    for (row = 0; row < 6; row++)
    {
        for (col = 0; col < 5; col++)
        {
            if (board[row][col] == 'K')
            {
                whiteKingRow = row;
                whiteKingCol = col;
                break;
            }
        }
    }

    // Check if any black piece can attack the white king
    for (row = 0; row < 6; row++)
    {
        for (col = 0; col < 5; col++)
        {
            char piece = board[row][col];
            switch (piece)
            {
            case 'q': // Queen
                // Check for horizontal, vertical, or diagonal attack with no obstacles in the way
                if ((row == whiteKingRow || col == whiteKingCol || abs(row - whiteKingRow) == abs(col - whiteKingCol)) &&
                        !isPathBlocked(row, col, whiteKingRow, whiteKingCol))
                    return 1;
                break;
            case 'r': // Rook
                // Check for horizontal or vertical attack with no obstacles in the way
                if ((row == whiteKingRow || col == whiteKingCol) && !isPathBlocked(row, col, whiteKingRow, whiteKingCol))
                    return 1;
                break;
            case 'b': // Bishop
                // Check for diagonal attack with no obstacles in the way
                if ((abs(row - whiteKingRow) == abs(col - whiteKingCol)) && !isPathBlocked(row, col, whiteKingRow, whiteKingCol))
                    return 1;
                break;
            case 'n': // Knight
                // Check for L-shaped attack
                if ((row - whiteKingRow == 2 && col - whiteKingCol == 1) || (row - whiteKingRow == 1 && col - whiteKingCol == 2) || (whiteKingRow - row == 2 && whiteKingCol - col == 1) ||
                        (whiteKingRow - row == 1 && whiteKingCol - col == 2))
                    return 1;
                break;
            case 'p': // Pawn
                // Check for pawn attack (assuming pawns only attack diagonally)
                if ((whiteKingRow - row == 1) && (col - whiteKingCol == 1 || col - whiteKingCol == -1))
                    return 1;
                break;
            }
        }
    }

    // No piece found that can attack the white king
    return 0;
}



int setpiece(char piece,int x1, int y1, int x2, int y2)
{

    if(piece=='K')
    {

        readimagefile("w_king.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='Q')
    {

        readimagefile("w_queen.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='P')
    {

        readimagefile("w_pawn.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='R')
    {

        readimagefile("w_rook.gif",x1+20,y1+20,x2-20,y2-20);
    }


    if(piece=='N')
    {

        readimagefile("w_knight.gif",x1+20,y1+20,x2-20,y2-20);
    }


    if(piece=='B')
    {

        readimagefile("w_bishop.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='k')
    {

        readimagefile("b_king.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='q')
    {

        readimagefile("b_queen.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='r')
    {

        readimagefile("b_rook.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='n')
    {

        readimagefile("b_knight.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='p')
    {

        readimagefile("b_pawn.gif",x1+20,y1+20,x2-20,y2-20);
    }

    if(piece=='b')
    {
        //outtextxy(x1+25,y1+50,"Bishop");

        readimagefile("b_bishop.gif",x1+20,y1+20,x2-20,y2-20);
    }




}


int DrawChessboard()
{
    cleardevice();
    int x = 100, y = 100;
    int r, c;

    int  black = 0;
    int size = 100;

    for ( r = 0; r < 6; r++)
    {

        // iterate over 5cols
        for ( c = 0; c < 5; c++)
        {
            // color as black
            if (black == 0)
            {

                // set next color as white
                setcolor(WHITE);

                setfillstyle(SOLID_FILL, DARKGRAY);

                // creating rectangle
                // with length and breadth
                rectangle(x, y, x + size, y + size);

                // Fill an enclosed area
                floodfill(x + 1, y + 1, WHITE);

                // Set black to true
                black = 1;
            }

            // If current block is to
            // color as white
            else
            {
                setcolor(WHITE);


                // for whitw boxes
                setfillstyle(SOLID_FILL, WHITE);

                // creating rectangle
                // with length and breadth
                rectangle(x, y, x + size, y + size);

                // Fill an enclosed area
                floodfill(x + 1, y + 1, WHITE);

                // Set black to false
                black = 0;
            }
            setpiece(board[r][c],x,y,x+size,y+size);
            printf("%d%d %c\n",r,c,board[r][c]);


            x = x + size;


            delay(10);

        }

        delay(10);
        x = size;
        y = size + y;
    }
    if(isBlackKingInCheck())
    {
        settextstyle(6,0,2);
        outtextxy(660,350,"Black King");
        outtextxy(660,370,"On Check!");
    }
    if(isWhiteKingInCheck())
    {
        settextstyle(6,0,2);
        outtextxy(660,350,"White King");
        outtextxy(660,370,"On Check");
    }
    settextstyle(6,0,3);
    outtextxy(660,50,"Whoose");
    outtextxy(670,70,"Turn?");



    if(whooseMove==0)
    {

        settextstyle(6,0,3);   //font,direction,font_size
        outtextxy(660,150, "White");
        outtextxy(660,170, "player");
    }

    else
    {
        settextstyle(6,0,3);   //font,direction,font_size
        outtextxy(660,650,"Black");
        outtextxy(660,670, "Player");


    }



}









// Function to validate and print valid rook moves
int rookmove(int x, int y)
{
    //  if the selected piece is a rook
    char piece = board[selectedy - 1][selectedx - 1];
    if (piece != 'R' && piece != 'r')
    {
        //printf("Invalid piece selected.\n");
        return 0;
    }
    printf("Rook moves from %d%d to %d%d",selectedy - 1,selectedx - 1,y-1,x-1);
    // Check if the rook moves horizontally (same y-axis) or vertically (same x-axis)
    if (selectedx == x || selectedy == y)
    {
        // Check if the path is clear (no other pieces in the way)
        int dx = (x > selectedx) ? 1 : ((x < selectedx) ? -1 : 0);
        int dy = (y > selectedy) ? 1 : ((y < selectedy) ? -1 : 0);

        for (int i = selectedx + dx, j = selectedy + dy; i != x || j != y; i += dx, j += dy)
        {
            if (board[j - 1][i - 1] != ' ')
            {
                printf("Path is blocked.\n");
                return 0;
            }
        }

        // Perform the rook move
        board[y - 1][x - 1] = piece;
        board[selectedy - 1][selectedx - 1] = ' ';

        // Print the updated chessboard
        for (int i = 0; i < 5; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                printf("%c ", board[i][j]);
            }
            printf("\n");
        }
    }

    else
    {
        printf("Invalid rook move.\n");
        return 0;
    }

    return 1;
}




bool pawnmove(int x, int y)
{
    delay(1);

    // Check if the destination square is not empty
    if (board[y - 1][x - 1] != ' ')
    {
        char piece = board[selectedy - 1][selectedx - 1];

        // Check if it's a valid capture for the white pawn
        if (piece == 'P' && selectedx != x && selectedy + 1 == y)
        {
            board[y - 1][x - 1] = board[selectedy - 1][selectedx - 1];
            board[selectedy - 1][selectedx - 1] = ' ';
        }
        // Check if it's a valid capture for the black pawn
        else if (piece == 'p' && selectedx != x && selectedy - 1 == y)
        {
            board[y - 1][x - 1] = board[selectedy - 1][selectedx - 1];
            board[selectedy - 1][selectedx - 1] = ' ';
        }
        else
        {
            // Invalid capture, return false
            return false;
        }
    }
    else
    {
        // The destination square is empty, perform regular move
        char piece = board[selectedy - 1][selectedx - 1];

        if (piece == 'P' && selectedx == x && selectedy + 1 == y)
        {
            board[y - 1][x - 1] = board[selectedy - 1][selectedx - 1];
            board[selectedy - 1][selectedx - 1] = ' ';
        }
        else if (piece == 'p' && selectedx == x && selectedy - 1 == y)
        {
            board[y - 1][x - 1] = board[selectedy - 1][selectedx - 1];
            board[selectedy - 1][selectedx - 1] = ' ';
        }
        else
        {
            // Invalid move, return false
            return false;
        }
    }

    DrawChessboard();
    delay(1);

    return true;
}



int bishopmove(int x, int y)
{

    char piece = board[selectedy - 1][selectedx - 1];
    if (piece != 'B' && piece != 'b')
    {
        printf("Invalid piece selected.\n");
        return 0;
    }

    // Check if the bishop moves diagonally (same absolute difference between x and y)
    int dx = x - selectedx;
    int dy = y - selectedy;
    if (fabs(dx) == fabs(dy))
    {
        // Check if the path is clear (no other pieces in the way)
        int dirX = (dx > 0) ? 1 : -1;
        int dirY = (dy > 0) ? 1 : -1;

        for (int i = selectedx + dirX, j = selectedy + dirY; i != x || j != y; i += dirX, j += dirY)
        {
            if (board[j - 1][i - 1] != ' ')
            {
                printf("Path is blocked.\n");
                return 0;
            }
        }

        // Perform the bishop move
        board[y - 1][x - 1] = piece;
        board[selectedy - 1][selectedx - 1] = ' ';

        // Print the updated chessboard
        for (int i = 0; i < 5; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                printf("%c ", board[i][j]);
            }
            printf("\n");
        }
    }
    else
    {
        printf("Invalid bishop move.\n");
        return 0;
    }
    return 1;
}

int knightmove(int x, int y)
{
    // Check if the selected piece is a knight
    char piece = board[selectedy - 1][selectedx - 1];
    if (piece != 'N' && piece != 'n')
    {
        printf("Invalid piece selected.\n");
        return 0;
    }

    // Check if the knight moves in an L-shape (two squares in one direction and one square in a perpendicular direction)
    int dx = x - selectedx;
    int dy = y - selectedy;
    if ((dx * dx + dy * dy == 5) && (dx != 0) && (dy != 0))
    {
        // Perform the knight move
        board[y - 1][x - 1] = piece;
        board[selectedy - 1][selectedx - 1] = ' ';

        // Print the updated chessboard
        for (int i = 0; i < 5; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                printf("%c ", board[i][j]);
            }
            printf("\n");
        }
    }
    else
    {
        printf("Invalid knight move.\n");
        return 0;
    }

    return 1;
}



int queenmove(int x, int y)
{
    // Check if the selected piece is a queen
    char piece = board[selectedy - 1][selectedx - 1];
    if (piece != 'Q' && piece != 'q')
    {
        printf("Invalid piece selected.\n");
        return 0;
    }

    // Check if the queen moves horizontally, vertically, or diagonally
    int dx = x - selectedx;
    int dy = y - selectedy;
    if (dx == 0 || dy == 0 || fabs(dx) == fabs(dy))
    {
        // Check if the path is clear (no other pieces in the way)
        int dirX = (dx > 0) ? 1 : ((dx < 0) ? -1 : 0);
        int dirY = (dy > 0) ? 1 : ((dy < 0) ? -1 : 0);

        for (int i = selectedx + dirX, j = selectedy + dirY; i != x || j != y; i += dirX, j += dirY)
        {
            if (board[j - 1][i - 1] != ' ')
            {
                printf("Path is blocked.\n");
                return 0;
            }
        }

        // Perform the queen move
        board[y - 1][x - 1] = piece;
        board[selectedy - 1][selectedx - 1] = ' ';

        // Print the updated chessboard
        for (int i = 0; i < 5; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                printf("%c ", board[i][j]);
            }
            printf("\n");
        }
    }
    else
    {
        printf("Invalid queen move.\n");
        return 0;
    }

    return 1;
}

int kingmove(int x, int y)
{
    // Check if the selected piece is a king
    char piece = board[selectedy - 1][selectedx - 1];
    if (piece != 'K' && piece != 'k')
    {
        printf("Invalid piece selected.\n");
        return 0;
    }

    // Check if the king moves one square in any direction
    int dx = x - selectedx;
    int dy = y - selectedy;
    if ((dx >= -1 && dx <= 1) && (dy >= -1 && dy <= 1) && (dx != 0 || dy != 0))
    {
        // Perform the king move
        board[y - 1][x - 1] = piece;
        board[selectedy - 1][selectedx - 1] = ' ';

        // Print the updated chessboard
        for (int i = 0; i < 5; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                printf("%c ", board[i][j]);
            }
            printf("\n");
        }
    }
    else
    {
        printf("Invalid king move.\n");
        return 0;
    }
    return 1;
}


//pawn attack



void selectandmove()
{
    delay(1);
    setcolor(RED);


    for (int i = 0; i < 5; ++i)
    {
        rectangle(selectedx*100 - i, selectedy*100 - i, selectedx*100+100 + i, selectedy*100+100 + i);
    }


    // printf(" selectedx=%d ,selectedy=%d",selectedx,selectedy);
    delay(60);
}


/*
int minimax(int position,int depth, int whooseMove){

        if(depth==0){
            return -1;
        }

        if(whooseMove==0){
            maxVal= -100000;

        }

}
*/

int moving = 0;

int selectSquare(int x, int y)
{


    int x1 = x*100, y1 = y*100, x2 = x*100+100, y2 = y*100+100;


    while(1)
    {
        //cleardevice();
        if(moving==1)
        {
            selectandmove();
            delay(60);
        }

        setcolor(LIGHTGREEN);
        //rectangle(100,100,200,200);
        for (int i = 0; i < 5; ++i)
        {

            rectangle(x*100 - i, y*100 - i, x*100+100 + i, y*100+100 + i);

        }


        if(GetAsyncKeyState(VK_RIGHT))
        {
            //x1 += 100;
            //x2 += 100;
            x += 1;
            cleardevice();
            DrawChessboard();
            if(moving==1)
            {
                selectandmove();
                delay(60);
            }
        }

        if(GetAsyncKeyState(VK_LEFT))
        {
            //x1 -= 100;
            //x2 -= 100;
            x-=1;
            cleardevice();
            DrawChessboard();
            if(moving==1)
            {
                selectandmove();
                delay(60);
            }
        }



        if(GetAsyncKeyState(VK_UP))
        {
            //y1 -= 100;
            //y2 -= 100;
            y-=1;
            cleardevice();
            DrawChessboard();
            if(moving==1)
            {
                selectandmove();
                delay(60);
            }
        }

        if(GetAsyncKeyState(VK_DOWN))
        {
            //y1 += 100;
            //y2 += 100;
            y+=1;
            cleardevice();
            DrawChessboard();
            if(moving==1)
            {
                selectandmove();
                delay(1);
            }
        }

        if(GetAsyncKeyState(VK_RETURN))
        {
            if(moving==0)
            {
                selectedx = x;
                selectedy = y;
                selectandmove();
                moving = 1;
            }

            else
            {
                if(board[selectedy-1][selectedx-1] >= 65 && board[selectedy-1][selectedx-1] <= 90)
                {
                    if(whooseMove == 0)
                    {
                        if(!(board[y-1][x-1] >= 65 && board[y-1][x-1] <= 90))
                        {
                            printf("WHITEMOVED,%c",board[selectedy-1][selectedx-1]);
                            if(pawnmove(x,y) || rookmove(x,y) || bishopmove(x,y) || knightmove(x,y) || queenmove(x,y) || kingmove(x,y))
                            {
                                whooseMove = 1;
                                moving=0;
                                selectedx = 0;
                                selectedy = 0;
                            }

                        }
                        DrawChessboard();
                    }
                    else
                    {
                        moving=0;
                        selectedx = 0;
                        selectedy = 0;
                        DrawChessboard();
                        if(moving==1)
                        {
                            selectandmove();
                            delay(1);
                        }
                    }
                }
                else
                {
                    if(whooseMove == 1)
                    {
                        if(!(board[y-1][x-1] >= 97 && board[y-1][x-1] <= 122))
                        {
                            printf("BLACKMOVED,%c",board[selectedy-1][selectedx-1]);
                            if(pawnmove(x,y) || rookmove(x,y) || bishopmove(x,y) || knightmove(x,y) || queenmove(x,y) || kingmove(x,y))
                            {
                                whooseMove = 0;
                                moving=0;
                                selectedx = 0;
                                selectedy = 0;
                            }
                        }

                        DrawChessboard();

                    }
                    else
                    {
                        moving=0;
                        selectedx = 0;
                        selectedy = 0;
                        DrawChessboard();

                    }
                }

            }

            x++;
            y++;
            delay(60);
        }
        delay(60);
    }
    return 0;

}





int main()
{

    printf("%d   %d",piecevalue(0),piecevalue(1));
    int gr = DETECT, gm;

    initwindow(800,800,"MENU",0,0,false,true);
    DrawChessboard();

    selectSquare(1,1);


    getch();
    closegraph();


    return 0;
}

